<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>test new compute</title>
    <url>/2022/08/24/test/</url>
    <content><![CDATA[<h3 id="test-new-compute"><a href="#test-new-compute" class="headerlink" title="test new compute"></a>test new compute</h3>]]></content>
      <categories>
        <category>python</category>
        <category>numpy</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>numpy</tag>
        <tag>数据分析</tag>
      </tags>
  </entry>
  <entry>
    <title>如何定制centOS7系统</title>
    <url>/2020/09/12/%E5%A6%82%E4%BD%95%E5%AE%9A%E5%88%B6centOS7%E7%B3%BB%E7%BB%9F/</url>
    <content><![CDATA[<blockquote>
<p>很多情况下，我们需要根据需求定制 centOS 系统。本文介绍如何通过修改xml文件和Packages文件夹来实现对centOS7的软件安装的定制。</p>
</blockquote>
<a id="more"></a>

<h4 id="定位需求"><a href="#定位需求" class="headerlink" title="定位需求"></a>定位需求</h4><p>假如领导给你安排任务，叫你定制一个CentOS7系统，在软件选择界面只能选择特定的软件。在默认软件的左侧只允许有虚拟化服务器，和虚拟化服务器管理系统。右边保持默认即可。如下图所示。</p>
<p><img src="C:%5CUsers%5Clenovo.DESKTOP-JAA702O%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200912202828002.png" alt="image-20200912202828002"></p>
<p>明白了需求之后我们就可以修改配置文件定制我们的centOS7系统。</p>
<h4 id="挂载光盘"><a href="#挂载光盘" class="headerlink" title="挂载光盘"></a>挂载光盘</h4><p><code>mount -o loop *.iso /mnt/cdrom</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">cd</span> /mnt/cdrom</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> ls -al</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">drwxrwxrwx. 11 root root    253 9月  11 15:37 .</span></pre></td></tr><tr><td class="code"><pre><span class="line">drwxr-xr-x.  3 root root    152 9月  11 16:17 ..</span></pre></td></tr><tr><td class="code"><pre><span class="line">-rwxrwxrwx.  1 root root     57 9月   4 12:54 .discinfo</span></pre></td></tr><tr><td class="code"><pre><span class="line">drwxrwxrwx.  3 root root     35 9月   4 12:54 EFI</span></pre></td></tr><tr><td class="code"><pre><span class="line">-rwxrwxrwx.  1 root root  18092 9月   4 12:54 GPL</span></pre></td></tr><tr><td class="code"><pre><span class="line">drwxrwxrwx.  3 root root     57 9月   4 15:34 images</span></pre></td></tr><tr><td class="code"><pre><span class="line">drwxrwxrwx.  2 root root    217 9月   4 15:40 isolinux</span></pre></td></tr><tr><td class="code"><pre><span class="line">drwxrwxrwx.  2 root root     43 9月   4 13:17 LiveOS</span></pre></td></tr><tr><td class="code"><pre><span class="line">drwxrwxrwx.  2 root root    148 9月   4 15:40 manual</span></pre></td></tr><tr><td class="code"><pre><span class="line">drwxrwxrwx.  2 root root 282624 9月  11 14:00 Packages</span></pre></td></tr><tr><td class="code"><pre><span class="line">drwxrwxrwx.  3 root root   4096 9月   4 13:21 PackageSec</span></pre></td></tr><tr><td class="code"><pre><span class="line">drwxrwxrwx.  2 root root     84 9月   4 12:54 .post</span></pre></td></tr><tr><td class="code"><pre><span class="line">-rwxrwxrwx.  1 root root     83 9月   4 12:54 .productinfo</span></pre></td></tr><tr><td class="code"><pre><span class="line">drwxr-xr-x.  2 root root   4096 9月  12 21:05 repodata</span></pre></td></tr><tr><td class="code"><pre><span class="line">-rwxrwxrwx.  1 root root   1735 9月   4 12:54 RPM-GPG-KEY-kylin-release</span></pre></td></tr><tr><td class="code"><pre><span class="line">-rwxrwxrwx.  1 root root   3086 9月   4 12:54 TRANS.TBL</span></pre></td></tr><tr><td class="code"><pre><span class="line">-rwxrwxrwx.  1 root root   1062 9月   4 12:54 .treeinfo</span></pre></td></tr></table></figure>

<h4 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h4><p>通过关键字搜索，我们可以知道在repodata文件夹下面的*comps.xml文件控制着软件选择界面。在挂载镜像目录下运行：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> grep -r <span class="string">"最小安装"</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line">./repodata/*comps.xml</span></pre></td></tr></table></figure>

<p>于是我们可以发现xml文件里面有我们软件选择界面的所有结构及配置，我们只需要通过添加和裁剪掉部分xml标签就可以实现界面功能的更改，通过阅读我们可以发现*comps.xml文件的主要结构如下</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">comps</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="tag">&lt;<span class="name">group</span>&gt;</span>  <span class="comment">&lt;!--展示在右侧的可选部分标签为group--&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>groupid<span class="tag">&lt;/<span class="name">id</span>&gt;</span>  <span class="comment">&lt;!--group的id--&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>groupname<span class="tag">&lt;/<span class="name">name</span>&gt;</span>	<span class="comment">&lt;!--group的name--&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="tag">&lt;<span class="name">description</span>&gt;</span>group description<span class="tag">&lt;/<span class="name">description</span>&gt;</span>  <span class="comment">&lt;!--gourp的大概描述--&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="tag">&lt;<span class="name">default</span>&gt;</span>true/false<span class="tag">&lt;/<span class="name">default</span>&gt;</span>  <span class="comment">&lt;!--是否默认安装--&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="tag">&lt;<span class="name">uservisible</span>&gt;</span>true/false<span class="tag">&lt;/<span class="name">uservisible</span>&gt;</span>  <span class="comment">&lt;!--是否对用户可见--&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="tag">&lt;<span class="name">packagelist</span>&gt;</span>   <span class="comment">&lt;!--此group对应的所有rpm包--&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="tag">&lt;<span class="name">packagereq</span> <span class="attr">type</span>=<span class="string">"mandatory/optional/default"</span>&gt;</span>rpm name<span class="tag">&lt;/<span class="name">packagereq</span>&gt;</span>  <span class="comment">&lt;!--rpm报名不包含版本号）--&gt;</span>  </span></pre></td></tr><tr><td class="code"><pre><span class="line">            ...</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="tag">&lt;/<span class="name">packagelist</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="tag">&lt;/<span class="name">group</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    ...</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="tag">&lt;<span class="name">category</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    ...</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;/<span class="name">category</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    ...</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">environment</span>&gt;</span>  <span class="comment">&lt;!--展示在左侧的由用户选择部分(必须选一个)我们称为environment--&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>environment id<span class="tag">&lt;/<span class="name">id</span>&gt;</span>  <span class="comment">&lt;!--environment的id--&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>environment name<span class="tag">&lt;/<span class="name">name</span>&gt;</span>  <span class="comment">&lt;!--environment的name--&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="tag">&lt;<span class="name">description</span>&gt;</span>environment description<span class="tag">&lt;/<span class="name">description</span>&gt;</span>  <span class="comment">&lt;!--environment的大概描述--&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="tag">&lt;<span class="name">grouplist</span>&gt;</span>  <span class="comment">&lt;!--如果选中此environment就默认安装一下group--&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="tag">&lt;<span class="name">groupid</span>&gt;</span>groupid<span class="tag">&lt;/<span class="name">groupid</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            ...</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="tag">&lt;/<span class="name">grouplist</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="tag">&lt;<span class="name">optionlist</span>&gt;</span>  <span class="comment">&lt;!--若选中此environment，右侧栏显示下列group--&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="tag">&lt;<span class="name">groupid</span>&gt;</span>groupid<span class="tag">&lt;/<span class="name">groupid</span>&gt;</span> <span class="comment">&lt;!--core必须写在里面--&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            ...</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="tag">&lt;/<span class="name">optionlist</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    ...</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">comps</span>&gt;</span></span></pre></td></tr></table></figure>

<p>根据上述信息修改xml文件即可。</p>
<h4 id="配置依赖包"><a href="#配置依赖包" class="headerlink" title="配置依赖包"></a>配置依赖包</h4><p>上面工作之后我们已经修改好了界面，但是我们修改了界面之后还需要将所选中软件的rpm包添加到光盘中。<br>还是通过关键字搜索：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> find ./ -name <span class="string">"*.rpm"</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line">./Packages/xxx.rpm</span></pre></td></tr><tr><td class="code"><pre><span class="line">./PackageSec/xxx.rpm</span></pre></td></tr></table></figure>

<p>分别进入两个文件夹里看一下，可以发现软件安装所需要的rpm包都是在Packages里面。事实上PackageSec文件夹负责的是安全部分。后面我们会提到。<br>知道了Packages是负责rpm包之后我们只需要将所有rpm包放进去即可。</p>
<h4 id="让修改生效"><a href="#让修改生效" class="headerlink" title="让修改生效"></a>让修改生效</h4><p>第一次尝试定制镜像时踩了很多坑，其中就包括让修改后的xml文件生效的问题。修改完之后如果直接制作iso会发现安装时候界面没有任何改动。这时我们就需要createrepo这个命令来实现让修改生效，此命令会重新生成repodata文件夹。<br>我们先将xxx-comps.xml文件移到家目录下，然后删除repodata文件夹</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> mv repodata/xxx-comps.xml ~/xmls/</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> rm -rf repodata/</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> createrepo -g ~/xmls/xxx.xml ./</span></span></pre></td></tr></table></figure>

<p>这时我们就重新生成了repodata文件，但是我们进行完这一步之后xml文件虽然生效了，但是在软件安装时还是会出现unknown error。<br>这是因为我们的PackageSec文件夹是负责安全部分，贸然的使用createrepo会让负责安全部分的文件和其他文件产生冲突。所以我们应该先将PackageSec文件夹移出去，再重新使用createrepo命令，接着再移进来。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> mv repodata/xxx-comps.xml ~/xmls/ </span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> rm -rf repodata/</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> mv PackageSec/ ../</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> createrepo -g ~/xmls/xxx.xml ./</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> mv ../PackageSec ./</span></span></pre></td></tr></table></figure>

<p>此时修改配置文件完毕。</p>
<h4 id="重新生成镜像"><a href="#重新生成镜像" class="headerlink" title="重新生成镜像"></a>重新生成镜像</h4><p><code>mkisofs -v -U -J -R -T -m repoview -m boot.iso -b isolinux/isolinux.bin -c isolinux/boot.cat -no-emul-boot -boot-load-size 4 -boot-info-table -eltorito-alt-boot -e images/efiboot.img -no-emul-boot -V 光盘label -o 存放iso目录 镜像挂载文件夹</code></p>
<p><strong>至此，centOS7软件安装界面定制完成。</strong></p>
<p>完！</p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>centOS7系统定制</tag>
      </tags>
  </entry>
  <entry>
    <title> linux工作区bug解决流程</title>
    <url>/2020/09/04/linux%E5%B7%A5%E4%BD%9C%E5%8C%BAbug%E8%A7%A3%E5%86%B3%E6%B5%81%E7%A8%8B/</url>
    <content><![CDATA[<blockquote>
<p>在kylin10 V10操作系统中存在右键任务栏，显示工作区相关内容的bug，本文介绍如何解决</p>
</blockquote>
<a id="more"></a>

<h4 id="定位问题"><a href="#定位问题" class="headerlink" title="定位问题"></a>定位问题</h4><p>查找rpm包的基本流程在之前的文章中有提到。本篇也算是将理论实践了一番。感兴趣的可以看一下<br>由于任务区存在汉化功能。可以直接在/usr/share/locale中直接查找关键字</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /usr/share/locale</span></pre></td></tr><tr><td class="code"><pre><span class="line">grep -r "仅在此工作区显示"</span></pre></td></tr></table></figure>

<p>然后就可以搜索到相应的汉化.mo文件<br>找到相关文件之后，我们就可以通过rpm命令来找到是哪个rpm包中存在此文件。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rpm -qf /usr/share/locale/XXX (XXX指的是上面查找到的文件名)</span></pre></td></tr></table></figure>

<p>知道了是哪个rpm包支持此功能，我们就可以通过rpm命令找到src源码包名</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rpm -qi XXX（XXX指的是上面提到的rpm包名）</span></pre></td></tr></table></figure>

<p>至此，就可以定位到工作区源码包。</p>
<h4 id="定位并屏蔽源代码"><a href="#定位并屏蔽源代码" class="headerlink" title="定位并屏蔽源代码"></a>定位并屏蔽源代码</h4><p><strong>确定是哪个模块负责工作区，使用关键字进行搜索</strong></p>
<ul>
<li>使用grep命令查找关键字</li>
<li>通过搞清代码结构，可以尝试，但是过于复杂，时间可能不够用</li>
</ul>
<p>这里我们采用第一种方法</p>
<p><code>grep -r &quot;_Only On This Workspace&quot;</code></p>
<p>可以定位到源码在哪里，由于此bug逻辑比较简单。直接将搜索到的代码模块屏蔽即可</p>
<h4 id="生成patch重新编译"><a href="#生成patch重新编译" class="headerlink" title="生成patch重新编译"></a>生成patch重新编译</h4><p>制作patch文件<br>通过git format-patch HEAD^生成补丁，patch文件里可以有文件对比的差异。<br>打patch步骤如下：</p>
<ul>
<li><p>获取源码，通过rpm ivh xxx.src.rpm，可以在家目录中生成rpmbuild目录，并生成SOURCE及SPEC目录。分别存放.tar包以及.spec文件</p>
</li>
<li><p>展开源码包，进入SPEC目录，通过rpmbuild -bp xxx.spec命令，在rpmbuild目录下生成BUILD目录，并解压.tar文件到BUILD目录下获取到源码</p>
</li>
<li><p>生成parch文件，使用git format-patch生成patch文件</p>
</li>
<li><ul>
<li>首先在BUILD目录中生成git仓库，使用git init命令</li>
<li>接下来，追踪本地所有源代码git add –all</li>
<li>然后，使用git commit -m “提交描述” 将源代码提交到仓库</li>
<li>下一步，修改源码，自行vim操作，然后git add –all 提交更改，之后git commit -m “修改描述”</li>
<li>生成patch文件，git format-patch HEAD^</li>
<li>最后，复制patch文件~/rpmbuild/SOURCE中</li>
</ul>
</li>
<li><p>修改spec文件，将patch文件添加进去。此处为添加patch</p>
</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> Begin add by XXX</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> Patch0:xxx.patch</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> End add by XXX</span></span></pre></td></tr></table></figure>

<ul>
<li>将补丁打入，其中注意其中的-p1（路径问题，可以网上搜索一下）</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> %patch0 p1 -b .inline-icons</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> %patch0 p1</span></span></pre></td></tr></table></figure>

<ul>
<li>修改changelog，注意格式问题</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> * Wed Aug 19 2020 warren &lt;weiyuan@kylinos.cn&gt; 2.31.0-1</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> - add patch xxx(尽量详细)</span></span></pre></td></tr></table></figure>

<p>​    完成上述过程后已经对源码进行spec文件修改，相应的Patch文件已经放入SOURCE文件中。可以运行 rpmbuild -bp xxx.spec文件，查看BUILD中源码是否被修改</p>
<ul>
<li>rpm -ba xxx.spec 重新编译所有的包</li>
</ul>
<h4 id="重新安装"><a href="#重新安装" class="headerlink" title="重新安装"></a>重新安装</h4><p>rpm -e xxx.rpm –nodeps ，不管依赖直接卸载rpm包<br>安装后生成的rpm包，rpm -ivh xxx.rpm<br>重启reboot</p>
<p>完！</p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>bug解决流程</tag>
      </tags>
  </entry>
  <entry>
    <title> 搭建ovirt-engine基本流程 </title>
    <url>/2020/09/02/%E6%90%AD%E5%BB%BAovirt-engine%E5%9F%BA%E6%9C%AC%E6%B5%81%E7%A8%8B/</url>
    <content><![CDATA[<blockquote>
<p>ovirt是红帽虚拟化产品，其中由两部分组成，ovirt-engine及ovirt-node。此文介绍ovirt-engine的安装教程。</p>
</blockquote>
<a id="more"></a>

<h4 id="系统安装"><a href="#系统安装" class="headerlink" title="系统安装"></a>系统安装</h4><p>在VMware上安装CentOS7_64位<br>国内阿里站点：<a href="http://mirrors.aliyun.com/centos/7/isos/x86_64/" target="_blank" rel="noopener">http://mirrors.aliyun.com/centos/7/isos/x86_64/</a><br>然后选择<br><img src="images/centos7_64.jpg" alt=""></p>
<p>在vmware上最小安装或者即可，后面再装上图形界面。因为后面yum update步骤会导致图形界面显示不了  </p>
<h4 id="系统设置"><a href="#系统设置" class="headerlink" title="系统设置"></a>系统设置</h4><p><strong>为了安装过程一切顺利，先关掉SELinux</strong>  </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim /etc/selinux/config</span></pre></td></tr><tr><td class="code"><pre><span class="line">将SELinux对应位置修改为</span></pre></td></tr><tr><td class="code"><pre><span class="line">SELinux=diabled</span></pre></td></tr></table></figure>

<p><strong>然后关掉防火墙</strong></p>
<p><code>systemctl disable firewalld</code></p>
<p><strong>设置hostname</strong></p>
<p>后面设置host结点的时候必须通过Engine所在服务器的FQDN来进行设置。这里手动打上<br><code>hostnamectl set-hostname engine.lian</code></p>
<p>可以使用hostnamectl查看当前主机名称喝系统信息</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@engine vdsm]# hostnamectl</span></pre></td></tr><tr><td class="code"><pre><span class="line">   Static hostname: engine.lian</span></pre></td></tr><tr><td class="code"><pre><span class="line">         Icon name: computer-vm</span></pre></td></tr><tr><td class="code"><pre><span class="line">           Chassis: vm</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Machine ID: 607207ea728149ff9c74754bc00bcc88</span></pre></td></tr><tr><td class="code"><pre><span class="line">           Boot ID: 291b316adffd4432aa812ebb4173a60d</span></pre></td></tr><tr><td class="code"><pre><span class="line">    Virtualization: vmware</span></pre></td></tr><tr><td class="code"><pre><span class="line">  Operating System: CentOS Linux 7 (Core)</span></pre></td></tr><tr><td class="code"><pre><span class="line">       CPE OS Name: cpe:/o:centos:centos:7</span></pre></td></tr><tr><td class="code"><pre><span class="line">            Kernel: Linux 3.10.0-1127.19.1.el7.x86_64</span></pre></td></tr><tr><td class="code"><pre><span class="line">      Architecture: x86-64</span></pre></td></tr></table></figure>

<p><strong>然后重启系统</strong></p>
<p><code>reboot</code></p>
<h4 id="安装ovirt-engine管理后台"><a href="#安装ovirt-engine管理后台" class="headerlink" title="安装ovirt-engine管理后台"></a>安装ovirt-engine管理后台</h4><p><strong>修改yum源</strong></p>
<p>centos7官方的yum源连接速度实在太慢，这里改为网易的yum源，需要将原来的源备份一下，防止以后用到</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">cd</span> /etc/yum.repos.d</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> mkdir bak</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> mv *.repo bak/</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> curl -o CentOS7-Base-163.repo http://mirrors.163.com/.<span class="built_in">help</span>/CentOS7-Base-163.repo</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> yum clean all</span></span></pre></td></tr></table></figure>

<p><strong>在下载ovirt-engine之前，将ovirt官方的源添加到yum源库中</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> yum -y install http://resources.ovirt.org/pub/yum-repo/ovirt-release43.rpm</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> yum -y update</span></span></pre></td></tr></table></figure>

<p>yum -y update这一步很重要，时间占用略长，需要耐心等待。否则后面安装 ovirt-engine 时将无法查询到 ovirt-engin的包。<br>这里我们选择4.3是因为，后面安装 ovirt-node 时下载 vdsm  的 4.3以下 版本的会与与SOS有冲突。所以直接下载4.3版本。</p>
<p><strong>安装ovirt-engine</strong></p>
<p><code># yum -y install ovirt-enine</code></p>
<p>这一步由于依赖关系会到ovirt官方源获取。可能连接失败，需要多试几次。经过多次测试，只要将依赖关系下载下来。半小时之内都会下载下来。  </p>
<p>这一步会安装大量的依赖的包大约351个。占用时间比较长。尤其是最后一个ovirt-engine-*的包需要从ovirt官方的源下载，速度比较慢。需耐心等待。<br>如果在下载完成后出现一下错误。  </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">GPG key retrieval failed: [Errno 12] Timeout on https://raw.githubusercontent.com/CentOS-Storage-SIG/centos-release-storage-common/master/RPM-GPG-KEY-CentOS-SIG-Storage: (28,&amp;nbsp;’Connection timed out after 30001 milliseconds’)</span></pre></td></tr></table></figure>

<p>这是GPG key检测超时，将gpg检测关掉即可  </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vi /etc/yum.repos.d/ovirt-4.3.repo</span></pre></td></tr><tr><td class="code"><pre><span class="line">vi /etc/yum.repos.d/ovirt-4.3-dependencies.repo</span></pre></td></tr></table></figure>

<p>将gpgcheck设置为0</p>
<p><code>gpgcheck = 0</code></p>
<h4 id="配置ovirt-engine"><a href="#配置ovirt-engine" class="headerlink" title="配置ovirt-engine"></a>配置ovirt-engine</h4><p>ovirt-engine安装完成需要运行首次配置向导  </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@engine ~]# engine-setup</span></pre></td></tr><tr><td class="code"><pre><span class="line">[ INFO  ] Stage: Initializing</span></pre></td></tr><tr><td class="code"><pre><span class="line">[ INFO  ] Stage: Environment setup</span></pre></td></tr><tr><td class="code"><pre><span class="line">          Configuration files: [&#39;&#x2F;etc&#x2F;ovirt-engine-setup.conf.d&#x2F;10-packaging-jboss.conf&#39;, &#39;&#x2F;etc&#x2F;ovirt-engine-setup.conf.d&#x2F;10-packaging.conf&#39;]</span></pre></td></tr><tr><td class="code"><pre><span class="line">          Log file: &#x2F;var&#x2F;log&#x2F;ovirt-engine&#x2F;setup&#x2F;ovirt-engine-setup-20200831091209-oo7toy.log</span></pre></td></tr><tr><td class="code"><pre><span class="line">          Version: otopi-1.8.4 (otopi-1.8.4-1.el7)</span></pre></td></tr><tr><td class="code"><pre><span class="line">[ INFO  ] Stage: Environment packages setup</span></pre></td></tr><tr><td class="code"><pre><span class="line">[ INFO  ] Stage: Programs detection</span></pre></td></tr><tr><td class="code"><pre><span class="line">[ INFO  ] Stage: Environment setup (late)</span></pre></td></tr><tr><td class="code"><pre><span class="line">[ INFO  ] Stage: Environment customization</span></pre></td></tr><tr><td class="code"><pre><span class="line">         </span></pre></td></tr><tr><td class="code"><pre><span class="line">          --&#x3D;&#x3D; PRODUCT OPTIONS &#x3D;&#x3D;--</span></pre></td></tr><tr><td class="code"><pre><span class="line">         </span></pre></td></tr><tr><td class="code"><pre><span class="line">          Set up Cinderlib integration</span></pre></td></tr><tr><td class="code"><pre><span class="line">          (Currently in tech preview)</span></pre></td></tr><tr><td class="code"><pre><span class="line">          (Yes, No) [No]: 回车</span></pre></td></tr><tr><td class="code"><pre><span class="line">          Configure Engine on this host (Yes, No) [Yes]: 回车</span></pre></td></tr><tr><td class="code"><pre><span class="line">          Configure ovirt-provider-ovn (Yes, No) [Yes]: 回车(OVN:Open Virtual Network,配置虚拟化网络)</span></pre></td></tr><tr><td class="code"><pre><span class="line">          Configure WebSocket Proxy on this host (Yes, No) [Yes]:回车(WebSocket Proxy用来支持使用noVNC远程登录虚拟机图形界面管理)</span></pre></td></tr><tr><td class="code"><pre><span class="line">          * Please note * : Data Warehouse is required for the engine.</span></pre></td></tr><tr><td class="code"><pre><span class="line">          If you choose to not configure it on this host, you have to configure</span></pre></td></tr><tr><td class="code"><pre><span class="line">          it on a remote host, and then configure the engine on this host so</span></pre></td></tr><tr><td class="code"><pre><span class="line">          that it can access the database of the remote Data Warehouse host.</span></pre></td></tr><tr><td class="code"><pre><span class="line">          Configure Data Warehouse on this host (Yes, No) [Yes]: 回车(在本机配置数据库)</span></pre></td></tr><tr><td class="code"><pre><span class="line">          Configure Image I&#x2F;O Proxy on this host (Yes, No) [Yes]: 回车(Image I&#x2F;O Proxy可以支持向oVirt平台中上传虚拟机的磁盘镜像)</span></pre></td></tr><tr><td class="code"><pre><span class="line">          Configure VM Console Proxy on this host (Yes, No) [Yes]: 回车(支持访问虚拟机的串口console通信)</span></pre></td></tr><tr><td class="code"><pre><span class="line">         </span></pre></td></tr><tr><td class="code"><pre><span class="line">          --&#x3D;&#x3D; PACKAGES &#x3D;&#x3D;--</span></pre></td></tr><tr><td class="code"><pre><span class="line">         </span></pre></td></tr><tr><td class="code"><pre><span class="line">[ INFO  ] Checking for product updates...</span></pre></td></tr><tr><td class="code"><pre><span class="line">[ INFO  ] No product updates found</span></pre></td></tr><tr><td class="code"><pre><span class="line">         </span></pre></td></tr><tr><td class="code"><pre><span class="line">          --&#x3D;&#x3D; NETWORK CONFIGURATION &#x3D;&#x3D;--</span></pre></td></tr><tr><td class="code"><pre><span class="line">         </span></pre></td></tr><tr><td class="code"><pre><span class="line">          Host fully qualified DNS name of this server [engine.lian]: 回车(使用默认hostname就行,反正是准备用IP地址访问无所谓)</span></pre></td></tr><tr><td class="code"><pre><span class="line">[WARNING] Failed to resolve engine.lian using DNS, it can be resolved only locally</span></pre></td></tr><tr><td class="code"><pre><span class="line">          Setup can automatically configure the firewall on this system.</span></pre></td></tr><tr><td class="code"><pre><span class="line">          Note: automatic configuration of the firewall may overwrite current settings.</span></pre></td></tr><tr><td class="code"><pre><span class="line">          NOTICE: iptables is deprecated and will be removed in future releases</span></pre></td></tr><tr><td class="code"><pre><span class="line">          Do you want Setup to configure the firewall? (Yes, No) [Yes]: no回车(因为之前已经把防火墙服务给关掉了,所以就不用再配置防火墙的具体设置了)</span></pre></td></tr><tr><td class="code"><pre><span class="line">         </span></pre></td></tr><tr><td class="code"><pre><span class="line">          --&#x3D;&#x3D; DATABASE CONFIGURATION &#x3D;&#x3D;--</span></pre></td></tr><tr><td class="code"><pre><span class="line">         </span></pre></td></tr><tr><td class="code"><pre><span class="line">          Where is the DWH database located? (Local, Remote) [Local]: 回车(DWH:Data WareHouse使用本地数据库)</span></pre></td></tr><tr><td class="code"><pre><span class="line">          Setup can configure the local postgresql server automatically for the DWH to run. This may conflict with existing applications.</span></pre></td></tr><tr><td class="code"><pre><span class="line">          Would you like Setup to automatically configure postgresql and create DWH database, or prefer to perform that manually? (Automatic, Manual) [Automatic]: 回车(自动配置PostGreSQL数据库)</span></pre></td></tr><tr><td class="code"><pre><span class="line">          Where is the ovirt cinderlib database located? (Local, Remote) [Local]: </span></pre></td></tr><tr><td class="code"><pre><span class="line">          Setup can configure the local postgresql server automatically for the CinderLib to run. This may conflict with existing applications.</span></pre></td></tr><tr><td class="code"><pre><span class="line">          Would you like Setup to automatically configure postgresql and create CinderLib database, or prefer to perform that manually? (Automatic, Manual) [Automatic]: 回车(自动配置PostGreSQL数据库)</span></pre></td></tr><tr><td class="code"><pre><span class="line">          Where is the Engine database located? (Local, Remote) [Local]: 回车(Engine用到的数据库位于本机)</span></pre></td></tr><tr><td class="code"><pre><span class="line">          Setup can configure the local postgresql server automatically for the engine to run. This may conflict with existing applications.</span></pre></td></tr><tr><td class="code"><pre><span class="line">          Would you like Setup to automatically configure postgresql and create Engine database, or prefer to perform that manually? (Automatic, Manual) [Automatic]: 回车(使用安装程序自动创建Engine数据库)</span></pre></td></tr><tr><td class="code"><pre><span class="line">         </span></pre></td></tr><tr><td class="code"><pre><span class="line">          --&#x3D;&#x3D; OVIRT ENGINE CONFIGURATION &#x3D;&#x3D;--</span></pre></td></tr><tr><td class="code"><pre><span class="line">         </span></pre></td></tr><tr><td class="code"><pre><span class="line">          Engine admin password: 输入后台管理员密码回车</span></pre></td></tr><tr><td class="code"><pre><span class="line">          Confirm engine admin password: 再次输入密码回车</span></pre></td></tr><tr><td class="code"><pre><span class="line">[WARNING] Password is weak: The password is shorter than 8 characters</span></pre></td></tr><tr><td class="code"><pre><span class="line">          Use weak password? (Yes, No) [No]: yes（密码太弱才会有的选项，如果有输入yes回车）</span></pre></td></tr><tr><td class="code"><pre><span class="line">          Application mode (Virt, Gluster, Both) [Both]: 回车</span></pre></td></tr><tr><td class="code"><pre><span class="line">         </span></pre></td></tr><tr><td class="code"><pre><span class="line">          --&#x3D;&#x3D; STORAGE CONFIGURATION &#x3D;&#x3D;--</span></pre></td></tr><tr><td class="code"><pre><span class="line">         </span></pre></td></tr><tr><td class="code"><pre><span class="line">          Default SAN wipe after delete (Yes, No) [No]: 回车(yes的话在删除虚拟机的虚拟磁盘后会擦除存储设备上的对应块)</span></pre></td></tr><tr><td class="code"><pre><span class="line">         </span></pre></td></tr><tr><td class="code"><pre><span class="line">          --&#x3D;&#x3D; PKI CONFIGURATION &#x3D;&#x3D;--</span></pre></td></tr><tr><td class="code"><pre><span class="line">         </span></pre></td></tr><tr><td class="code"><pre><span class="line">          Organization name for certificate [lian]: 回车</span></pre></td></tr><tr><td class="code"><pre><span class="line">         </span></pre></td></tr><tr><td class="code"><pre><span class="line">          --&#x3D;&#x3D; APACHE CONFIGURATION &#x3D;&#x3D;--</span></pre></td></tr><tr><td class="code"><pre><span class="line">         </span></pre></td></tr><tr><td class="code"><pre><span class="line">          Setup can configure the default page of the web server to present the application home page. This may conflict with existing applications.</span></pre></td></tr><tr><td class="code"><pre><span class="line">          Do you wish to set the application as the default page of the web server? (Yes, No) [Yes]: 回车(使用apache作为web服务器)</span></pre></td></tr><tr><td class="code"><pre><span class="line">          Setup can configure apache to use SSL using a certificate issued from the internal CA.</span></pre></td></tr><tr><td class="code"><pre><span class="line">          Do you wish Setup to configure that, or prefer to perform that manually? (Automatic, Manual) [Automatic]: 回车(自动配置CA证书)</span></pre></td></tr><tr><td class="code"><pre><span class="line">         </span></pre></td></tr><tr><td class="code"><pre><span class="line">          --&#x3D;&#x3D; SYSTEM CONFIGURATION &#x3D;&#x3D;--</span></pre></td></tr><tr><td class="code"><pre><span class="line">         </span></pre></td></tr><tr><td class="code"><pre><span class="line">         </span></pre></td></tr><tr><td class="code"><pre><span class="line">          --&#x3D;&#x3D; MISC CONFIGURATION &#x3D;&#x3D;--</span></pre></td></tr><tr><td class="code"><pre><span class="line">         </span></pre></td></tr><tr><td class="code"><pre><span class="line">          Please choose Data Warehouse sampling scale:</span></pre></td></tr><tr><td class="code"><pre><span class="line">          (1) Basic</span></pre></td></tr><tr><td class="code"><pre><span class="line">          (2) Full</span></pre></td></tr><tr><td class="code"><pre><span class="line">          (1, 2)[1]: 回车(使用基本的数据库示例初始化数据)</span></pre></td></tr><tr><td class="code"><pre><span class="line">         </span></pre></td></tr><tr><td class="code"><pre><span class="line">          --&#x3D;&#x3D; END OF CONFIGURATION &#x3D;&#x3D;--</span></pre></td></tr><tr><td class="code"><pre><span class="line">         </span></pre></td></tr><tr><td class="code"><pre><span class="line">[ INFO  ] Stage: Setup validation</span></pre></td></tr><tr><td class="code"><pre><span class="line">[WARNING] Warning: Not enough memory is available on the host. Minimum requirement is 4096MB, and 16384MB is recommended.</span></pre></td></tr><tr><td class="code"><pre><span class="line">          Do you want Setup to continue, with amount of memory less than recommended? (Yes, No) [No]: yes回车(因为在虚拟机上装，内存过小才会有的提示。我们要输入yes)</span></pre></td></tr><tr><td class="code"><pre><span class="line">         </span></pre></td></tr><tr><td class="code"><pre><span class="line">          --&#x3D;&#x3D; CONFIGURATION PREVIEW &#x3D;&#x3D;--</span></pre></td></tr><tr><td class="code"><pre><span class="line">         </span></pre></td></tr><tr><td class="code"><pre><span class="line">          Application mode                        : both</span></pre></td></tr><tr><td class="code"><pre><span class="line">          Default SAN wipe after delete           : False</span></pre></td></tr><tr><td class="code"><pre><span class="line">          Update Firewall                         : False</span></pre></td></tr><tr><td class="code"><pre><span class="line">          Host FQDN                               : engine.lian</span></pre></td></tr><tr><td class="code"><pre><span class="line">          CinderLib database secured connection   : False</span></pre></td></tr><tr><td class="code"><pre><span class="line">          CinderLib database user name            : ovirt_cinderlib</span></pre></td></tr><tr><td class="code"><pre><span class="line">          CinderLib database name                 : ovirt_cinderlib</span></pre></td></tr><tr><td class="code"><pre><span class="line">          CinderLib database host                 : localhost</span></pre></td></tr><tr><td class="code"><pre><span class="line">          CinderLib database port                 : 5432</span></pre></td></tr><tr><td class="code"><pre><span class="line">          CinderLib database host name validation : False</span></pre></td></tr><tr><td class="code"><pre><span class="line">          Set up Cinderlib integration            : True</span></pre></td></tr><tr><td class="code"><pre><span class="line">          Configure local CinderLib database      : True</span></pre></td></tr><tr><td class="code"><pre><span class="line">          Configure local Engine database         : True</span></pre></td></tr><tr><td class="code"><pre><span class="line">          Set application as default page         : True</span></pre></td></tr><tr><td class="code"><pre><span class="line">          Configure Apache SSL                    : True</span></pre></td></tr><tr><td class="code"><pre><span class="line">          Engine database secured connection      : False</span></pre></td></tr><tr><td class="code"><pre><span class="line">          Engine database user name               : engine</span></pre></td></tr><tr><td class="code"><pre><span class="line">          Engine database name                    : engine</span></pre></td></tr><tr><td class="code"><pre><span class="line">          Engine database host                    : localhost</span></pre></td></tr><tr><td class="code"><pre><span class="line">          Engine database port                    : 5432</span></pre></td></tr><tr><td class="code"><pre><span class="line">          Engine database host name validation    : False</span></pre></td></tr><tr><td class="code"><pre><span class="line">          Engine installation                     : True</span></pre></td></tr><tr><td class="code"><pre><span class="line">          PKI organization                        : lian</span></pre></td></tr><tr><td class="code"><pre><span class="line">          Set up ovirt-provider-ovn               : False</span></pre></td></tr><tr><td class="code"><pre><span class="line">          Configure WebSocket Proxy               : True</span></pre></td></tr><tr><td class="code"><pre><span class="line">          DWH installation                        : True</span></pre></td></tr><tr><td class="code"><pre><span class="line">          DWH database host                       : localhost</span></pre></td></tr><tr><td class="code"><pre><span class="line">          DWH database port                       : 5432</span></pre></td></tr><tr><td class="code"><pre><span class="line">          Configure local DWH database            : True</span></pre></td></tr><tr><td class="code"><pre><span class="line">          Configure Image I&#x2F;O Proxy               : True</span></pre></td></tr><tr><td class="code"><pre><span class="line">          Configure VMConsole Proxy               : True</span></pre></td></tr><tr><td class="code"><pre><span class="line">         </span></pre></td></tr><tr><td class="code"><pre><span class="line">          Please confirm installation settings (OK, Cancel) [OK]: 回车</span></pre></td></tr><tr><td class="code"><pre><span class="line">[ INFO  ] Stage: Transaction setup</span></pre></td></tr><tr><td class="code"><pre><span class="line">[ INFO  ] Stopping engine service</span></pre></td></tr><tr><td class="code"><pre><span class="line">[ INFO  ] Stopping ovirt-fence-kdump-listener service</span></pre></td></tr><tr><td class="code"><pre><span class="line">[ INFO  ] Stopping dwh service</span></pre></td></tr><tr><td class="code"><pre><span class="line">[ INFO  ] Stopping Image I&#x2F;O Proxy service</span></pre></td></tr><tr><td class="code"><pre><span class="line">[ INFO  ] Stopping vmconsole-proxy service</span></pre></td></tr><tr><td class="code"><pre><span class="line">[ INFO  ] Stopping websocket-proxy service</span></pre></td></tr><tr><td class="code"><pre><span class="line">[ INFO  ] Stage: Misc configuration (early)</span></pre></td></tr><tr><td class="code"><pre><span class="line">[ INFO  ] Stage: Package installation</span></pre></td></tr><tr><td class="code"><pre><span class="line">[ INFO  ] Stage: Misc configuration</span></pre></td></tr><tr><td class="code"><pre><span class="line">[ INFO  ] Initializing PostgreSQL</span></pre></td></tr><tr><td class="code"><pre><span class="line">[ INFO  ] Creating PostgreSQL &#39;ovirt_cinderlib&#39; database</span></pre></td></tr><tr><td class="code"><pre><span class="line">[ INFO  ] Configuring PostgreSQL</span></pre></td></tr><tr><td class="code"><pre><span class="line">[ INFO  ] Upgrading CA</span></pre></td></tr><tr><td class="code"><pre><span class="line">[ INFO  ] Creating PostgreSQL &#39;engine&#39; database</span></pre></td></tr><tr><td class="code"><pre><span class="line">[ INFO  ] Configuring PostgreSQL</span></pre></td></tr><tr><td class="code"><pre><span class="line">[ INFO  ] Creating PostgreSQL &#39;ovirt_engine_history&#39; database</span></pre></td></tr><tr><td class="code"><pre><span class="line">[ INFO  ] Configuring PostgreSQL</span></pre></td></tr><tr><td class="code"><pre><span class="line">[ INFO  ] Creating CA</span></pre></td></tr><tr><td class="code"><pre><span class="line">[ INFO  ] Creating&#x2F;refreshing DWH database schema</span></pre></td></tr><tr><td class="code"><pre><span class="line">[ INFO  ] Configuring Image I&#x2F;O Proxy</span></pre></td></tr><tr><td class="code"><pre><span class="line">[ INFO  ] Setting up ovirt-vmconsole proxy helper PKI artifacts</span></pre></td></tr><tr><td class="code"><pre><span class="line">[ INFO  ] Setting up ovirt-vmconsole SSH PKI artifacts</span></pre></td></tr><tr><td class="code"><pre><span class="line">[ INFO  ] Configuring WebSocket Proxy</span></pre></td></tr><tr><td class="code"><pre><span class="line">[ INFO  ] Creating&#x2F;refreshing Engine database schema</span></pre></td></tr><tr><td class="code"><pre><span class="line">[ INFO  ] Creating&#x2F;refreshing Engine &#39;internal&#39; domain database schema</span></pre></td></tr><tr><td class="code"><pre><span class="line">[ INFO  ] Creating default mac pool range</span></pre></td></tr><tr><td class="code"><pre><span class="line">[ INFO  ] Setting a password for internal user admin</span></pre></td></tr><tr><td class="code"><pre><span class="line">[ INFO  ] Generating post install configuration file &#39;&#x2F;etc&#x2F;ovirt-engine-setup.conf.d&#x2F;20-setup-ovirt-post.conf&#39;</span></pre></td></tr><tr><td class="code"><pre><span class="line">[ INFO  ] Stage: Transaction commit</span></pre></td></tr><tr><td class="code"><pre><span class="line">[ INFO  ] Stage: Closing up</span></pre></td></tr><tr><td class="code"><pre><span class="line">[ INFO  ] Starting engine service</span></pre></td></tr><tr><td class="code"><pre><span class="line">[ INFO  ] Starting dwh service</span></pre></td></tr><tr><td class="code"><pre><span class="line">[ INFO  ] Restarting ovirt-vmconsole proxy service</span></pre></td></tr><tr><td class="code"><pre><span class="line">         </span></pre></td></tr><tr><td class="code"><pre><span class="line">          --&#x3D;&#x3D; SUMMARY &#x3D;&#x3D;--</span></pre></td></tr><tr><td class="code"><pre><span class="line">         </span></pre></td></tr><tr><td class="code"><pre><span class="line">[ INFO  ] Restarting httpd</span></pre></td></tr><tr><td class="code"><pre><span class="line">          In order to configure firewalld, copy the files from</span></pre></td></tr><tr><td class="code"><pre><span class="line">              &#x2F;etc&#x2F;ovirt-engine&#x2F;firewalld to &#x2F;etc&#x2F;firewalld&#x2F;services</span></pre></td></tr><tr><td class="code"><pre><span class="line">              and execute the following commands:</span></pre></td></tr><tr><td class="code"><pre><span class="line">              firewall-cmd --permanent --add-service ovirt-postgres</span></pre></td></tr><tr><td class="code"><pre><span class="line">              firewall-cmd --permanent --add-service ovirt-https</span></pre></td></tr><tr><td class="code"><pre><span class="line">              firewall-cmd --permanent --add-service ovirt-fence-kdump-listener</span></pre></td></tr><tr><td class="code"><pre><span class="line">              firewall-cmd --permanent --add-service ovirt-imageio-proxy</span></pre></td></tr><tr><td class="code"><pre><span class="line">              firewall-cmd --permanent --add-service ovirt-websocket-proxy</span></pre></td></tr><tr><td class="code"><pre><span class="line">              firewall-cmd --permanent --add-service ovirt-http</span></pre></td></tr><tr><td class="code"><pre><span class="line">              firewall-cmd --permanent --add-service ovirt-vmconsole-proxy</span></pre></td></tr><tr><td class="code"><pre><span class="line">              firewall-cmd --reload</span></pre></td></tr><tr><td class="code"><pre><span class="line">          The following network ports should be opened:</span></pre></td></tr><tr><td class="code"><pre><span class="line">              tcp:2222</span></pre></td></tr><tr><td class="code"><pre><span class="line">              tcp:443</span></pre></td></tr><tr><td class="code"><pre><span class="line">              tcp:5432</span></pre></td></tr><tr><td class="code"><pre><span class="line">              tcp:54323</span></pre></td></tr><tr><td class="code"><pre><span class="line">              tcp:6100</span></pre></td></tr><tr><td class="code"><pre><span class="line">              tcp:80</span></pre></td></tr><tr><td class="code"><pre><span class="line">              udp:7410</span></pre></td></tr><tr><td class="code"><pre><span class="line">          An example of the required configuration for iptables can be found at:</span></pre></td></tr><tr><td class="code"><pre><span class="line">              &#x2F;etc&#x2F;ovirt-engine&#x2F;iptables.example</span></pre></td></tr><tr><td class="code"><pre><span class="line">          Please use the user &#39;admin@internal&#39; and password specified in order to login</span></pre></td></tr><tr><td class="code"><pre><span class="line">          Web access is enabled at:</span></pre></td></tr><tr><td class="code"><pre><span class="line">              http:&#x2F;&#x2F;engine.lian:80&#x2F;ovirt-engine</span></pre></td></tr><tr><td class="code"><pre><span class="line">              https:&#x2F;&#x2F;engine.lian:443&#x2F;ovirt-engine</span></pre></td></tr><tr><td class="code"><pre><span class="line">          Internal CA C3:CE:5F:1C:AB:52:AC:0A:F5:AA:D1:A2:86:5A:3D:25:CC:CF:81:7E</span></pre></td></tr><tr><td class="code"><pre><span class="line">          SSH fingerprint: SHA256:fyQ+cLuByiqbFG6f&#x2F;I&#x2F;Ukid4yv3IwzrYJFUX0MpiwCg</span></pre></td></tr><tr><td class="code"><pre><span class="line">[WARNING] Warning: Not enough memory is available on the host. Minimum requirement is 4096MB, and 16384MB is recommended.</span></pre></td></tr><tr><td class="code"><pre><span class="line">         </span></pre></td></tr><tr><td class="code"><pre><span class="line">          --&#x3D;&#x3D; END OF SUMMARY &#x3D;&#x3D;--</span></pre></td></tr><tr><td class="code"><pre><span class="line">         </span></pre></td></tr><tr><td class="code"><pre><span class="line">[ INFO  ] Stage: Clean up</span></pre></td></tr><tr><td class="code"><pre><span class="line">          Log file is located at &#x2F;var&#x2F;log&#x2F;ovirt-engine&#x2F;setup&#x2F;ovirt-engine-setup-20200831091209-oo7toy.log</span></pre></td></tr><tr><td class="code"><pre><span class="line">[ INFO  ] Generating answer file &#39;&#x2F;var&#x2F;lib&#x2F;ovirt-engine&#x2F;setup&#x2F;answers&#x2F;20200831092223-setup.conf&#39;</span></pre></td></tr><tr><td class="code"><pre><span class="line">[ INFO  ] Stage: Pre-termination</span></pre></td></tr><tr><td class="code"><pre><span class="line">[ INFO  ] Stage: Termination</span></pre></td></tr><tr><td class="code"><pre><span class="line">[ INFO  ] Execution of setup completed successfully</span></pre></td></tr></table></figure>

<p>至此，在本机上安装ovirt完毕，但是如果在另一台电脑上访问服务器ip地址，会提示<br>“The FQDN used to access the system is not a valid engine FQDN. You must access the system using the engine FQDN or one of the engine alternate FQDNs.”</p>
<p><img src="images/ovirt-engine.png" alt=""></p>
<p><strong>想要让其他电脑可以正常访问服务器ip，需要修改配置文件配置文件</strong></p>
<p><code>vim /etc/ovirt-engine/engine.conf.d/*-sso.conf</code></p>
<p>写入内容</p>
<p><code>SSO_CALLBACK_PREFIX_CHECK=false</code></p>
<p>然后重启 ovirt-engine服务</p>
<p><code>service ovir-engine restart</code></p>
<p>再次访问，错误提示消失，至此，搭建完成。</p>
<p><img src="images/ovirt%E4%B8%BB%E9%A1%B5.png" alt=""></p>
<p>完！</p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>ovirt</tag>
        <tag>虚拟化</tag>
      </tags>
  </entry>
  <entry>
    <title>rpm查找源码包的基本流程</title>
    <url>/2020/08/21/rpm%E6%9F%A5%E6%89%BE%E6%BA%90%E7%A0%81%E5%8C%85%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%B5%81%E7%A8%8B/</url>
    <content><![CDATA[<blockquote>
<p>linux系统修复Bug时通常需要找到rpm源码包进行修改，本文主要介绍如何进行源码包的匹配。</p>
</blockquote>
<a id="more"></a>

<h4 id="查找源码包流程"><a href="#查找源码包流程" class="headerlink" title="查找源码包流程"></a>查找源码包流程</h4><h5 id="第一种方法"><a href="#第一种方法" class="headerlink" title="第一种方法"></a>第一种方法</h5><p><strong>通过进程名称查找</strong></p>
<p>先用top找到相关的进程名，可以后面使用-接参数，可灵活使用</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">top</span></pre></td></tr></table></figure>

<p>找到对应的进程名称之后通过rpm -qa搜索进程名，可以出现部分rpm包</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rpm -qa | grep 进程名称</span></pre></td></tr></table></figure>

<p>可以匹配出几个rpm安装包，使用这种方法可能匹配出来的包较多，所以不能够确定具体时哪个包<br>所以不太确定  </p>
<h5 id="第二种方法"><a href="#第二种方法" class="headerlink" title="第二种方法"></a>第二种方法</h5><p><strong>通过汉化包查找</strong></p>
<p>首先进入到 /usr/share/locale目录</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /usr/share/locale</span></pre></td></tr></table></figure>

<p>然后再在此目录内匹配搜索相关信息，例如:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">grep -r "发送到桌面快捷方式"</span></pre></td></tr></table></figure>

<p>基本可以确定是哪个文件里面有这个汉化包<br>然后根据上面搜索到的文件路径，使用rpm -qf匹配时哪个安装包</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rpm -qf "/usr/share/locale/上面查找到文件的路径"</span></pre></td></tr></table></figure>

<p>确定安装包的名称</p>
<p>然后根据匹配到的安装包名通过 rpm -qi 找到源码包名字</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rpm -qi 安装包名称</span></pre></td></tr></table></figure>

<p>找到源码包之后下载源码包，找到相应的源码修改即可</p>
<p><strong>可将两种方法结合起来灵活使用为佳</strong></p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>rpm 编包</tag>
      </tags>
  </entry>
  <entry>
    <title>go语言 make和new的区别</title>
    <url>/2019/12/22/go%E8%AF%AD%E8%A8%80-make%E5%92%8Cnew%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
    <content><![CDATA[<blockquote>
<p>new和make都可以用来分配空间，初始化类型，但是他们确有不同</p>
</blockquote>
<a id="more"></a>

<h4 id="new-int-返回的是将T初始化零值之后T类型的指针"><a href="#new-int-返回的是将T初始化零值之后T类型的指针" class="headerlink" title="new(int)返回的是将T初始化零值之后T类型的指针"></a>new(int)返回的是将T初始化零值之后T类型的指针</h4><p>new(T)分配一个T类型的空间并初始化为T类型的零值，返回T类型变量的指针<br>例如  </p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">p := <span class="built_in">new</span>(<span class="keyword">int</span>)</span></pre></td></tr></table></figure>

<p>上面代码中p和下面的代码第三行的p是等价的  </p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> p *<span class="keyword">int</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">i := <span class="number">0</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">p = &amp;i</span></pre></td></tr></table></figure>

<p>new(int)将分配的空间初始化为int的零值即为0，并返回int的指针  </p>
<h4 id="make只能用于slice-map-channel"><a href="#make只能用于slice-map-channel" class="headerlink" title="make只能用于slice,map,channel"></a>make只能用于slice,map,channel</h4><p>make只能用于slice，map，channel三种类型，make(T,args)返回的是初始化之后T类型的值，这个值是经过初始化之后T的引用，而不是指针*T，也不是T类型的零值  </p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> s []<span class="keyword">int</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> s == <span class="literal">nil</span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    fmt.Printf(<span class="string">"s is nil ---&gt;%v\n"</span>,s) <span class="comment">// []int(nil)</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>上述代码表示slice的零值是nil</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">s := <span class="built_in">make</span>([]<span class="keyword">int</span>,<span class="number">3</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> s == <span class="literal">nil</span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    fmt.Printf(<span class="string">"s is nil---&gt;%v\n"</span>,s)</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;<span class="keyword">else</span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    fmt.Printf(<span class="string">"s is not nil ---&gt;%v\n"</span>,s) <span class="comment">// []int&#123;0,0,0&#125;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>使用make之后的slice是一个初始化的slice，即slice的长度，宽度，底层指向的array都被make完成初始化，此时slice内容被Int的零值填充，形式是[0,0,0]，map和channel也是类似的。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> c1 <span class="keyword">chan</span> <span class="keyword">string</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> c1 == <span class="literal">nil</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    fmt.Printf(<span class="string">"c1 is nil --&gt; %#v \n "</span>, c1) <span class="comment">//(chan string)(nil)</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">c2 := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">string</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> c2 == <span class="literal">nil</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    fmt.Printf(<span class="string">"c2 is nil --&gt; %#v \n "</span>, c2)</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125; <span class="keyword">else</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    fmt.Printf(<span class="string">"c2 is not nill --&gt; %#v \n "</span>, c2)<span class="comment">//(chan string)(0xc420016120)</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<h5 id="make-T-args-返回的是T的引用"><a href="#make-T-args-返回的是T的引用" class="headerlink" title="make(T,args)返回的是T的引用"></a>make(T,args)返回的是T的引用</h5><p>如果不特殊声明，go的函数默认都是按值传参。在函数内部对值修改不影响值本身，但是make(T,args)通过函数传递参数之后可以直接修改，即map，slice，channel通过参数之后在函数内部修改将直接影响到外部的值</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">modifySlice</span><span class="params">(s []<span class="keyword">int</span>)</span></span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	s[<span class="number">0</span>] = <span class="number">1</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">s := <span class="built_in">make</span>([]<span class="keyword">int</span>,<span class="number">3</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">fmt.Println(s) <span class="comment">// []int&#123;0,0,0&#125;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">modifySlice(s)</span></pre></td></tr><tr><td class="code"><pre><span class="line">fmt.Println(s) <span class="comment">// []int&#123;1,0,0&#125;</span></span></pre></td></tr></table></figure>

<p>这说明make()返回的是引用类型，在函数内可以直接更改s的原始值，对map和channel也是如此</p>
<h4 id="很少使用new"><a href="#很少使用new" class="headerlink" title="很少使用new()"></a>很少使用new()</h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> Foo <span class="keyword">struct</span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    name <span class="keyword">string</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    age <span class="keyword">int</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// 声明初始化</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> foo1 Foo</span></pre></td></tr><tr><td class="code"><pre><span class="line">fmt.Printf(<span class="string">"foo1 ---&gt;%v\n"</span>,foo1) <span class="comment">// main.Foo&#123;age:0,name:""&#125;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">foo1.age = <span class="number">1</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">fmt.Println(fool.age)</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// struct literal 初始化</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">foo2 := Foo&#123;&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">fmt.Printf(<span class="string">"foo1 ---&gt;%v\n"</span>,foo2) <span class="comment">// main.Foo&#123;age:0,name:""&#125;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">foo2.age = <span class="number">2</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">fmt.Println(foo2.age)</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// 指针初始化</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">foo3 := &amp;Foo&#123;&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">fmt.Printf(<span class="string">"foo1 ---&gt;%v\n"</span>,foo3) <span class="comment">// main.Foo&#123;age:0,name:""&#125;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">foo2.age = <span class="number">3</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">fmt.Println(foo2.age)</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// new 初始化</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">foo4 := <span class="built_in">new</span>(Foo)</span></pre></td></tr><tr><td class="code"><pre><span class="line">...</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// 声明指针并用 new 初始化</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> foo5 *Foo = <span class="built_in">new</span>(Foo)</span></pre></td></tr><tr><td class="code"><pre><span class="line">...</span></pre></td></tr></table></figure>

<p>foo1 和foo2都是类型的值，foo3/4/5都是Foo的指针类型。但是所有的foo都可以直接使用Foo的field，读取或者修改，为什么？  </p>
<p>因为go会自动进行转换。foo1.age和foo3.age是等价的。  </p>
<p>因而可以直接使用struct literal的方式创建对象，能达到和new创建一样的情况而不需要使用new()，这个也是随个人习惯。</p>
]]></content>
      <categories>
        <category>golang</category>
      </categories>
      <tags>
        <tag>golang</tag>
      </tags>
  </entry>
  <entry>
    <title>理解pandas中axis</title>
    <url>/2019/12/22/%E7%90%86%E8%A7%A3pandas%E4%B8%ADaxis/</url>
    <content><![CDATA[<blockquote>
<p>不管是在pandas还是在numpy中，axis作为一个参数都是一个很重要的存在。但有时我们会纠结于axis到底是作用于行还是列中。这里我们就来理解axis到底是如何定义的。</p>
</blockquote>
<a id="more"></a>

<p>python中的axis到底是如何定义的。为0/1时是代表行还是列？<br>我们用以下代码做示例    </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span></pre></td></tr><tr><td class="code"><pre><span class="line">df=pd.DataFrame(np.random.rand(<span class="number">12</span>).reshape(<span class="number">4</span>,<span class="number">-1</span>),index=list(<span class="string">'abcd'</span>),columns=list(<span class="string">'ABC'</span>))</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">'''</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">out:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">          A         B         C</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">a  0.931192  0.306019  0.990724</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">b  0.342723  0.174033  0.799012</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">c  0.809201  0.566531  0.135429</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">d  0.068132  0.739093  0.610740</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">out end;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">'''</span></span></pre></td></tr></table></figure>

<p>这里我们先创建了一个DataFrame，现在使用drop方法丢弃掉其中一列，使用axis为1的情况  </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df.drop(<span class="string">'A'</span>,axis=<span class="number">1</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">'''</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">out:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">          B         C</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">a  0.306019  0.990724</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">b  0.174033  0.799012</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">c  0.566531  0.135429</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">d  0.739093  0.610740</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">out end;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">'''</span></span></pre></td></tr></table></figure>

<p>可以看到A列已经被删除了，在这里axis作用于列。    </p>
<p>现在我们调用mean(1)求均值</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df.mean(axis=<span class="number">1</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">'''</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">out:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">a    0.742645</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">b    0.438589</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">c    0.503720</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">d    0.472655</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">dtype: float64</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">out end;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">'''</span></span></pre></td></tr></table></figure>

<p>对于上面的例子来说，当axis为1时却求出了每一行的均值。  </p>
<blockquote>
<p>现在我们来看一下官方帮助的解释：</p>
</blockquote>
<p><strong>轴用来为超过一维的数组定义的属性，二维数组拥有两个轴，第0轴沿着行垂直往下。第一轴沿着列的水平方向延申</strong></p>
<p>用图片来解释就是下图。浅显易懂</p>
<p><img src="images/%E7%9F%A9%E9%98%B5%E8%BD%B4.png" alt=""></p>
<p><strong>注意官方使用纵轴和横轴和来解释0和1，而轴是有方向的。所以不要用行和列的思维去解释行和列。因为行和列是没有方向的</strong><br>有了上面的理解之后，我们就可以解释为什么mean(1)时求出的是每一行的平均值了<br>其实是沿着从左到右的方向（也就是上面我们提到的横轴）求出平均值，并不是我们所误解的每一行求平均值。<br> 作用在drop()上时，也是横向发生变化，体现在列的值减少</p>
]]></content>
      <categories>
        <category>python</category>
        <category>pandas</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>pandas</tag>
      </tags>
  </entry>
  <entry>
    <title>numpy.random中常用模块</title>
    <url>/2019/12/22/numpy-random%E4%B8%AD%E5%B8%B8%E7%94%A8%E6%A8%A1%E5%9D%97/</url>
    <content><![CDATA[<blockquote>
<p>numpy是我们在python中常用的用于数据分析的工具，在numpy里面又存在很多节省时间的方法，例如random模块，这个可以产生随机值的模块。在很大程度上可以帮我们产生需要的一系列值。</p>
</blockquote>
<a id="more"></a>

<p>numpy.random常用模块<br><strong>rand(4,3)函数返回0-1之间的数字</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">array([[<span class="number">0.3832652</span> , <span class="number">0.36343273</span>, <span class="number">0.47900132</span>],</span></pre></td></tr><tr><td class="code"><pre><span class="line">       [<span class="number">0.62420466</span>, <span class="number">0.13228593</span>, <span class="number">0.58927964</span>],</span></pre></td></tr><tr><td class="code"><pre><span class="line">       [<span class="number">0.36499423</span>, <span class="number">0.18262211</span>, <span class="number">0.59475821</span>],</span></pre></td></tr><tr><td class="code"><pre><span class="line">       [<span class="number">0.31715646</span>, <span class="number">0.11298201</span>, <span class="number">0.36332277</span>]])</span></pre></td></tr></table></figure>



<p>*<em>randn(4,3)返回一个或者一组样本，符合正态分布 *</em>  </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">array([[ <span class="number">0.27580105</span>, <span class="number">-0.79606409</span>,  <span class="number">0.27770072</span>],</span></pre></td></tr><tr><td class="code"><pre><span class="line">       [<span class="number">-0.41272231</span>,  <span class="number">1.1971399</span> ,  <span class="number">1.144409</span>  ],</span></pre></td></tr><tr><td class="code"><pre><span class="line">       [ <span class="number">0.84481791</span>, <span class="number">-1.18783243</span>,  <span class="number">0.92623515</span>],</span></pre></td></tr><tr><td class="code"><pre><span class="line">np       [ <span class="number">1.45964641</span>, <span class="number">-0.39872575</span>,  <span class="number">0.38672823</span>]])</span></pre></td></tr></table></figure>



<p><strong>randint(low,high=None,size=None,dtype=</strong>)</p>
<p>返回随机整数，范围区间为[low,high]，包含Low不包含high<br>size表示数组维度类型，dtype表示数据类型，默认为np.int<br>high值没有填写时，生成的数据是0-low，不包含low  </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In [<span class="number">1</span>]: np.random.randint(<span class="number">1</span>,<span class="number">4</span>,size=(<span class="number">2</span>,<span class="number">2</span>))</span></pre></td></tr><tr><td class="code"><pre><span class="line">Out[<span class="number">1</span>]:</span></pre></td></tr><tr><td class="code"><pre><span class="line">array([[<span class="number">1</span>, <span class="number">3</span>],</span></pre></td></tr><tr><td class="code"><pre><span class="line">       [<span class="number">1</span>, <span class="number">2</span>]])</span></pre></td></tr></table></figure>

<p><strong>生成[0,1)之间的浮点数</strong></p>
<ul>
<li>numpy.random.random_sample(size=None)</li>
<li>numpy.random.random(size=None)</li>
<li>numpy.random.ranf(s/ize=None)</li>
<li>numpy.random.sample(size=None)</li>
</ul>
<p>size表示维度</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In [<span class="number">2</span>]: np.random.random_sample(size=[<span class="number">2</span>,<span class="number">2</span>])</span></pre></td></tr><tr><td class="code"><pre><span class="line">Out[<span class="number">2</span>]:</span></pre></td></tr><tr><td class="code"><pre><span class="line">array([[<span class="number">0.645753</span>  , <span class="number">0.31327233</span>],</span></pre></td></tr><tr><td class="code"><pre><span class="line">       [<span class="number">0.75382147</span>, <span class="number">0.63840037</span>]])</span></pre></td></tr></table></figure>

<p><strong>numpy.random.choice</strong>()</p>
<p>numpy.random.choice(a,size=None,replace=True,p=None)</p>
<ul>
<li>从给定的一维数组中生成随机数</li>
<li>a为一维数组或者整数，sizes为数组维度，p为数组中数据出现的概率</li>
<li>如果a是一个整数，对应的一维数组是arange(a)</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In [<span class="number">3</span>]: np.random.choice(<span class="number">4</span>,size=[<span class="number">2</span>,<span class="number">4</span>])</span></pre></td></tr><tr><td class="code"><pre><span class="line">Out[<span class="number">3</span>]:</span></pre></td></tr><tr><td class="code"><pre><span class="line">array([[<span class="number">0</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>],</span></pre></td></tr><tr><td class="code"><pre><span class="line">       [<span class="number">0</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">0</span>]])</span></pre></td></tr></table></figure>

<ul>
<li>当replace是，生成的数据不能有重复值，这就要求数组的长度大于size  </li>
<li>参数p的长度必须等于数组的长度，且p里面数据之和应该等于0</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In [<span class="number">20</span>]: np.random.choice(demo_list,size=(<span class="number">3</span>,<span class="number">3</span>),p=(<span class="number">0.1</span>,<span class="number">0.6</span>,<span class="number">0.1</span>,<span class="number">0.1</span>,<span class="number">0.1</span>))</span></pre></td></tr><tr><td class="code"><pre><span class="line">Out[<span class="number">20</span>]:</span></pre></td></tr><tr><td class="code"><pre><span class="line">array([[<span class="string">'sansumg'</span>, <span class="string">'lenovo'</span>, <span class="string">'iphone'</span>],</span></pre></td></tr><tr><td class="code"><pre><span class="line">       [<span class="string">'moto'</span>, <span class="string">'sansumg'</span>, <span class="string">'xiaomi'</span>],</span></pre></td></tr><tr><td class="code"><pre><span class="line">       [<span class="string">'sansumg'</span>, <span class="string">'sansumg'</span>, <span class="string">'sansumg'</span>]], dtype=<span class="string">'&lt;U7'</span>)</span></pre></td></tr></table></figure>

<p><strong>np.random.seed()</strong></p>
<ul>
<li>np.random.seed()的作用，使得随机数据可预测</li>
<li>当我们设置相同的seed，每次生成的随机数相同。如果不设置seed，则每次会生成不同的随机数</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In [<span class="number">44</span>]: np.random.seed(<span class="number">1</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">In [<span class="number">45</span>]: np.random.rand(<span class="number">4</span>,<span class="number">3</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">Out[<span class="number">45</span>]:</span></pre></td></tr><tr><td class="code"><pre><span class="line">array([[<span class="number">4.17022005e-01</span>, <span class="number">7.20324493e-01</span>, <span class="number">1.14374817e-04</span>],</span></pre></td></tr><tr><td class="code"><pre><span class="line">       [<span class="number">3.02332573e-01</span>, <span class="number">1.46755891e-01</span>, <span class="number">9.23385948e-02</span>],</span></pre></td></tr><tr><td class="code"><pre><span class="line">       [<span class="number">1.86260211e-01</span>, <span class="number">3.45560727e-01</span>, <span class="number">3.96767474e-01</span>],</span></pre></td></tr><tr><td class="code"><pre><span class="line">       [<span class="number">5.38816734e-01</span>, <span class="number">4.19194514e-01</span>, <span class="number">6.85219500e-01</span>]])</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">In [<span class="number">46</span>]: np.random.seed(<span class="number">1</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">In [<span class="number">47</span>]: np.random.rand(<span class="number">4</span>,<span class="number">3</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">Out[<span class="number">47</span>]:</span></pre></td></tr><tr><td class="code"><pre><span class="line">array([[<span class="number">4.17022005e-01</span>, <span class="number">7.20324493e-01</span>, <span class="number">1.14374817e-04</span>],</span></pre></td></tr><tr><td class="code"><pre><span class="line">       [<span class="number">3.02332573e-01</span>, <span class="number">1.46755891e-01</span>, <span class="number">9.23385948e-02</span>],</span></pre></td></tr><tr><td class="code"><pre><span class="line">       [<span class="number">1.86260211e-01</span>, <span class="number">3.45560727e-01</span>, <span class="number">3.96767474e-01</span>],</span></pre></td></tr><tr><td class="code"><pre><span class="line">       [<span class="number">5.38816734e-01</span>, <span class="number">4.19194514e-01</span>, <span class="number">6.85219500e-01</span>]])</span></pre></td></tr></table></figure>

<hr>
<p>这里穿插一个np.arange()，这也是常用到的函数  </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">np.arange(<span class="number">-1</span>,<span class="number">1</span>,<span class="number">0.1</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">array([<span class="number">-1.00000000e+00</span>, <span class="number">-9.00000000e-01</span>, <span class="number">-8.00000000e-01</span>, <span class="number">-7.00000000e-01</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">       <span class="number">-6.00000000e-01</span>, <span class="number">-5.00000000e-01</span>, <span class="number">-4.00000000e-01</span>, <span class="number">-3.00000000e-01</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">       <span class="number">-2.00000000e-01</span>, <span class="number">-1.00000000e-01</span>, <span class="number">-2.22044605e-16</span>,  <span class="number">1.00000000e-01</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="number">2.00000000e-01</span>,  <span class="number">3.00000000e-01</span>,  <span class="number">4.00000000e-01</span>,  <span class="number">5.00000000e-01</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="number">6.00000000e-01</span>,  <span class="number">7.00000000e-01</span>,  <span class="number">8.00000000e-01</span>,  <span class="number">9.00000000e-01</span>])</span></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>python</category>
        <category>numpy</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>numpy</tag>
      </tags>
  </entry>
  <entry>
    <title>二分查找算法</title>
    <url>/2019/12/22/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/</url>
    <content><![CDATA[<blockquote>
<p>查找算法是经常用到的算法之一，在很多情况下，我们都需要实现适合需求的查找算法。今天我们来实现排序算法中比较经典的二分查找，并探讨其时间复杂度。</p>
</blockquote>
<a id="more"></a>

<h4 id="数据结构与算法"><a href="#数据结构与算法" class="headerlink" title="数据结构与算法"></a>数据结构与算法</h4><p>二分查找要求数组已经是有序的，在有序的基础上进行二分查找。关于数组排序的问题可以参考我之前的博客。</p>
<h5 id="二分查找："><a href="#二分查找：" class="headerlink" title="二分查找："></a>二分查找：</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">binary_search</span><span class="params">(list,item)</span>:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    low = <span class="number">0</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    high = len(list)<span class="number">-1</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">while</span> low &lt;= high:</span></pre></td></tr><tr><td class="code"><pre><span class="line">        mid = int((low+high)/<span class="number">2</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">        guess = list[mid]</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span> guess==item:</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">return</span> mid</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span> guess&gt;item:</span></pre></td></tr><tr><td class="code"><pre><span class="line">            high = mid + <span class="number">1</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">else</span>:</span></pre></td></tr><tr><td class="code"><pre><span class="line">            low = mid + <span class="number">1</span> <span class="comment"># 防止进入无限循环</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">return</span> <span class="literal">None</span></span></pre></td></tr></table></figure>

<p>用大O表示法的话，二分查找的时间复杂度为O(log n)（log表示以2为底数），因为对于一个长度为n的数组，利用二分查找方法查找一个元素最多需要使用log n（以2为底数）次数。</p>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>查找</tag>
      </tags>
  </entry>
  <entry>
    <title>用python实现排序算法</title>
    <url>/2019/12/16/%E7%94%A8python%E5%AE%9E%E7%8E%B0%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<blockquote>
<p>排序在很多种情况下都会用到，尽管python有自带的sort排序。但是很多时候我们还是要根据实际情况采取最适合的排序方法。这里我们用python来实现8大排序中的5个常见的排序。其余三个以后再更新。</p>
</blockquote>
<a id="more"></a>

<h4 id="用Python实现8大排序"><a href="#用Python实现8大排序" class="headerlink" title="用Python实现8大排序"></a>用Python实现8大排序</h4><h5 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">maopao_sort</span><span class="params">(a)</span>:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">if</span> len(a) == <span class="number">1</span>:</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> a</span></pre></td></tr><tr><td class="code"><pre><span class="line">    length = len(a)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(length):</span></pre></td></tr><tr><td class="code"><pre><span class="line">        ischanged = <span class="number">0</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(length<span class="number">-1</span>):</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">if</span> a[j] &gt; a[j+<span class="number">1</span>]:</span></pre></td></tr><tr><td class="code"><pre><span class="line">                a[j],a[j+<span class="number">1</span>] = a[j+<span class="number">1</span>],a[j]</span></pre></td></tr><tr><td class="code"><pre><span class="line">                ischanged = <span class="number">1</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span> ischanged==<span class="number">0</span>:</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">break</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">return</span> a</span></pre></td></tr></table></figure>

<h5 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">xuanze_sort</span><span class="params">(a)</span>:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">if</span> len(a) == <span class="number">1</span>:</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> a</span></pre></td></tr><tr><td class="code"><pre><span class="line">    length = len(a)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(length):</span></pre></td></tr><tr><td class="code"><pre><span class="line">        k = find_min(a[j:])</span></pre></td></tr><tr><td class="code"><pre><span class="line">        a[j],a[k+j] = a[k+j],a[j]</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">return</span> a</span></pre></td></tr><tr><td class="code"><pre><span class="line">    </span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">find_min</span><span class="params">(a)</span>:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    m = a[<span class="number">0</span>]</span></pre></td></tr><tr><td class="code"><pre><span class="line">    k = <span class="number">0</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(a)):</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span> a[i]&lt;m:</span></pre></td></tr><tr><td class="code"><pre><span class="line">            m = a[i]</span></pre></td></tr><tr><td class="code"><pre><span class="line">            k = i</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">return</span> k</span></pre></td></tr></table></figure>

<h5 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">insert_sort</span><span class="params">(a)</span>:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">if</span> len(a) == <span class="number">1</span>:</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> a</span></pre></td></tr><tr><td class="code"><pre><span class="line">    length = len(a)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,length):</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">0</span>,i):</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">if</span> a[j]&gt;a[i]:</span></pre></td></tr><tr><td class="code"><pre><span class="line">                m = a[i]</span></pre></td></tr><tr><td class="code"><pre><span class="line">                a[j+<span class="number">1</span>:i+<span class="number">1</span>] = a[j:i]</span></pre></td></tr><tr><td class="code"><pre><span class="line">                a[j] = m</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">return</span> a</span></pre></td></tr></table></figure>

<h5 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">quick_sort</span><span class="params">(a)</span>:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">if</span> len(a) == <span class="number">1</span>:</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> a</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">if</span> len(a) == <span class="number">0</span>:</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> []</span></pre></td></tr><tr><td class="code"><pre><span class="line">    m = a[<span class="number">0</span>]</span></pre></td></tr><tr><td class="code"><pre><span class="line">    a.pop(<span class="number">0</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    left = [i <span class="keyword">for</span> i <span class="keyword">in</span> a <span class="keyword">if</span> i&lt;=m]</span></pre></td></tr><tr><td class="code"><pre><span class="line">    right = [i <span class="keyword">for</span> i <span class="keyword">in</span> a <span class="keyword">if</span> i&gt;m]</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">return</span> quick_sort(left) + [m] + quick_sort(right)</span></pre></td></tr></table></figure>

<h5 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">merge_sort</span><span class="params">(a)</span>:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">if</span> len(a) == <span class="number">1</span>:</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> a</span></pre></td></tr><tr><td class="code"><pre><span class="line">    half = int(len(a)/<span class="number">2</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    left = merge_sort(a[:half])</span></pre></td></tr><tr><td class="code"><pre><span class="line">    right = merge_sort(a[half:])</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">return</span> merge(left,right)</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">merge</span><span class="params">(left,right)</span>:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    result = []</span></pre></td></tr><tr><td class="code"><pre><span class="line">    i = <span class="number">0</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    j = <span class="number">0</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">while</span> i &lt; len(left) <span class="keyword">and</span> j &lt; len(right):</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span> left[i] &lt;= right[j]:</span></pre></td></tr><tr><td class="code"><pre><span class="line">            result.append(left[i])</span></pre></td></tr><tr><td class="code"><pre><span class="line">            i += <span class="number">1</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">else</span>:</span></pre></td></tr><tr><td class="code"><pre><span class="line">            result.append(right[j])</span></pre></td></tr><tr><td class="code"><pre><span class="line">            j += <span class="number">1</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    result.extend(left[i:])</span></pre></td></tr><tr><td class="code"><pre><span class="line">    result.extend(right[j:])</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">return</span> result</span></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>数据结构</category>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>排序</tag>
      </tags>
  </entry>
  <entry>
    <title>numpy中transpose,T,swapaxes 方法</title>
    <url>/2019/12/08/numpy%E4%B8%ADtranspose%EF%BC%8CT%EF%BC%8C-swapaxes-%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<p>搞懂 numpy 置换方法transpose，T， swapaxes  </p>
<p><strong>transpose函数</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In [<span class="number">0</span>]: arr = np.arange(<span class="number">16</span>).reshape(<span class="number">4</span>,<span class="number">3</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">In [<span class="number">1</span>]: arr</span></pre></td></tr><tr><td class="code"><pre><span class="line">Out[<span class="number">1</span>]: </span></pre></td></tr><tr><td class="code"><pre><span class="line">array([[[ <span class="number">0</span>,  <span class="number">1</span>,  <span class="number">2</span>,  <span class="number">3</span>],</span></pre></td></tr><tr><td class="code"><pre><span class="line">        [ <span class="number">4</span>,  <span class="number">5</span>,  <span class="number">6</span>,  <span class="number">7</span>]],</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">       [[ <span class="number">8</span>,  <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>],</span></pre></td></tr><tr><td class="code"><pre><span class="line">        [<span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">15</span>]]])</span></pre></td></tr><tr><td class="code"><pre><span class="line">In [<span class="number">2</span>]: arr.transpose(<span class="number">2</span>,<span class="number">0</span>,<span class="number">1</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">Out[<span class="number">2</span>]:</span></pre></td></tr><tr><td class="code"><pre><span class="line">array([[[ <span class="number">0</span>,  <span class="number">4</span>],</span></pre></td></tr><tr><td class="code"><pre><span class="line">        [ <span class="number">8</span>, <span class="number">12</span>]],</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">       [[ <span class="number">1</span>,  <span class="number">5</span>],</span></pre></td></tr><tr><td class="code"><pre><span class="line">        [ <span class="number">9</span>, <span class="number">13</span>]],</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">       [[ <span class="number">2</span>,  <span class="number">6</span>],</span></pre></td></tr><tr><td class="code"><pre><span class="line">        [<span class="number">10</span>, <span class="number">14</span>]],</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">       [[ <span class="number">3</span>,  <span class="number">7</span>],</span></pre></td></tr><tr><td class="code"><pre><span class="line">        [<span class="number">11</span>, <span class="number">15</span>]]])</span></pre></td></tr></table></figure>
<a id="more"></a>
<p>怎么理解呢？？首先我们要搞清楚transpose里面的参数(2，0，1)代表的是什么。<br>我们知道在pandas里面0，1代表的是DataFrame里的横轴和纵轴。在Numpy中一个array可能不止有两阶，那怎么用数字表示呢？<br>在这方面pandas和numpy采用了同样的设计，都是直接用(0,1,2,3,4，…)，代表每一阶的轴<br>所以现在我们应该应该豁然开朗了(0,1,2)代表的就是每一级的轴。<br>知道了这个之后，我们再来看tanspose的运算方式：<br>以1为例在arr里坐标是（0，0，1），用（2，0，1）进行置换  </p>
<ul>
<li>2在（2，0，1）置换方式的第一个数，而2代表第三阶。代表把第原来第三阶坐标放到第一阶</li>
<li>0代表把原来第一阶坐标放到第二阶</li>
<li>1代表把原来第二阶坐标放到第三阶</li>
</ul>
<p>得到的结果就是（1，0，0），以此类推，就得到了上面的结果。</p>
<p><strong>T</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In [<span class="number">12</span>]: arr</span></pre></td></tr><tr><td class="code"><pre><span class="line">Out[<span class="number">12</span>]:</span></pre></td></tr><tr><td class="code"><pre><span class="line">array([[[ <span class="number">0</span>,  <span class="number">1</span>,  <span class="number">2</span>,  <span class="number">3</span>],</span></pre></td></tr><tr><td class="code"><pre><span class="line">        [ <span class="number">4</span>,  <span class="number">5</span>,  <span class="number">6</span>,  <span class="number">7</span>]],</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">       [[ <span class="number">8</span>,  <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>],</span></pre></td></tr><tr><td class="code"><pre><span class="line">        [<span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">15</span>]]])</span></pre></td></tr><tr><td class="code"><pre><span class="line">In [<span class="number">2</span>]: arr.T      </span></pre></td></tr><tr><td class="code"><pre><span class="line">Out[<span class="number">2</span>]:            </span></pre></td></tr><tr><td class="code"><pre><span class="line">array([[[ <span class="number">0</span>,  <span class="number">8</span>],  </span></pre></td></tr><tr><td class="code"><pre><span class="line">        [ <span class="number">4</span>, <span class="number">12</span>]], </span></pre></td></tr><tr><td class="code"><pre><span class="line">                   </span></pre></td></tr><tr><td class="code"><pre><span class="line">       [[ <span class="number">1</span>,  <span class="number">9</span>],  </span></pre></td></tr><tr><td class="code"><pre><span class="line">        [ <span class="number">5</span>, <span class="number">13</span>]], </span></pre></td></tr><tr><td class="code"><pre><span class="line">                   </span></pre></td></tr><tr><td class="code"><pre><span class="line">       [[ <span class="number">2</span>, <span class="number">10</span>],  </span></pre></td></tr><tr><td class="code"><pre><span class="line">        [ <span class="number">6</span>, <span class="number">14</span>]], </span></pre></td></tr><tr><td class="code"><pre><span class="line">                   </span></pre></td></tr><tr><td class="code"><pre><span class="line">       [[ <span class="number">3</span>, <span class="number">11</span>],  </span></pre></td></tr><tr><td class="code"><pre><span class="line">        [ <span class="number">7</span>, <span class="number">15</span>]]])</span></pre></td></tr></table></figure>

<p>这里我们来探讨一下他的转置原理<br>*<em>以数字10为例，在arr中的坐标为（1，0，2），在arr.T中的坐标是（2，0，1）。 *</em><br>看到这里你应该有些明白了，就是单纯的把坐标换颠倒而已，把每个元素的坐标都置换过来，就形成了一个arr.T ，也就是arr.T和arr.transpose(2,1,0)得到的是同一个结果<br>arr.T的shape变成了（4，2，2）</p>
<p><strong>swapaxes</strong></p>
<p>先上代码示范  </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In [<span class="number">34</span>]: arr</span></pre></td></tr><tr><td class="code"><pre><span class="line">Out[<span class="number">34</span>]:</span></pre></td></tr><tr><td class="code"><pre><span class="line">array([[[ <span class="number">0</span>,  <span class="number">1</span>,  <span class="number">2</span>,  <span class="number">3</span>],</span></pre></td></tr><tr><td class="code"><pre><span class="line">        [ <span class="number">4</span>,  <span class="number">5</span>,  <span class="number">6</span>,  <span class="number">7</span>]],</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">       [[ <span class="number">8</span>,  <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>],</span></pre></td></tr><tr><td class="code"><pre><span class="line">        [<span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">15</span>]]])</span></pre></td></tr><tr><td class="code"><pre><span class="line">In [<span class="number">35</span>]: arr.swapaxes(<span class="number">1</span>,<span class="number">2</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">Out[<span class="number">35</span>]:</span></pre></td></tr><tr><td class="code"><pre><span class="line">array([[[ <span class="number">0</span>,  <span class="number">4</span>],</span></pre></td></tr><tr><td class="code"><pre><span class="line">        [ <span class="number">1</span>,  <span class="number">5</span>],</span></pre></td></tr><tr><td class="code"><pre><span class="line">        [ <span class="number">2</span>,  <span class="number">6</span>],</span></pre></td></tr><tr><td class="code"><pre><span class="line">        [ <span class="number">3</span>,  <span class="number">7</span>]],</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">       [[ <span class="number">8</span>, <span class="number">12</span>],</span></pre></td></tr><tr><td class="code"><pre><span class="line">        [ <span class="number">9</span>, <span class="number">13</span>],</span></pre></td></tr><tr><td class="code"><pre><span class="line">        [<span class="number">10</span>, <span class="number">14</span>],</span></pre></td></tr><tr><td class="code"><pre><span class="line">        [<span class="number">11</span>, <span class="number">15</span>]]])</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">In [<span class="number">36</span>]: arr.swapaxes(<span class="number">2</span>,<span class="number">1</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">Out[<span class="number">36</span>]:</span></pre></td></tr><tr><td class="code"><pre><span class="line">array([[[ <span class="number">0</span>,  <span class="number">4</span>],</span></pre></td></tr><tr><td class="code"><pre><span class="line">        [ <span class="number">1</span>,  <span class="number">5</span>],</span></pre></td></tr><tr><td class="code"><pre><span class="line">        [ <span class="number">2</span>,  <span class="number">6</span>],</span></pre></td></tr><tr><td class="code"><pre><span class="line">        [ <span class="number">3</span>,  <span class="number">7</span>]],</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">       [[ <span class="number">8</span>, <span class="number">12</span>],</span></pre></td></tr><tr><td class="code"><pre><span class="line">        [ <span class="number">9</span>, <span class="number">13</span>],</span></pre></td></tr><tr><td class="code"><pre><span class="line">        [<span class="number">10</span>, <span class="number">14</span>],</span></pre></td></tr><tr><td class="code"><pre><span class="line">        [<span class="number">11</span>, <span class="number">15</span>]]])</span></pre></td></tr></table></figure>

<p>其实在知道了上面两种置换方法之后，swapaxes( )就没有那么神秘了<br>其实就是简单地把两个轴置的坐标对调一下，同样的结果也可以通过arr.transpose(0,2,1)来实现，不信我们来试验一下  </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In [<span class="number">37</span>]: arr.transpose(<span class="number">0</span>,<span class="number">2</span>,<span class="number">1</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">Out[<span class="number">37</span>]:</span></pre></td></tr><tr><td class="code"><pre><span class="line">array([[[ <span class="number">0</span>,  <span class="number">4</span>],</span></pre></td></tr><tr><td class="code"><pre><span class="line">        [ <span class="number">1</span>,  <span class="number">5</span>],</span></pre></td></tr><tr><td class="code"><pre><span class="line">        [ <span class="number">2</span>,  <span class="number">6</span>],</span></pre></td></tr><tr><td class="code"><pre><span class="line">        [ <span class="number">3</span>,  <span class="number">7</span>]],</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">       [[ <span class="number">8</span>, <span class="number">12</span>],</span></pre></td></tr><tr><td class="code"><pre><span class="line">        [ <span class="number">9</span>, <span class="number">13</span>],</span></pre></td></tr><tr><td class="code"><pre><span class="line">        [<span class="number">10</span>, <span class="number">14</span>],</span></pre></td></tr><tr><td class="code"><pre><span class="line">        [<span class="number">11</span>, <span class="number">15</span>]]])</span></pre></td></tr></table></figure>

<p>实践是检验真理的唯一标准，只要认真做一遍，其实也没有那么玄乎啦！</p>
]]></content>
      <categories>
        <category>numpy</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>numpy</tag>
      </tags>
  </entry>
  <entry>
    <title>numpy average与mean区别</title>
    <url>/2019/12/04/numpy%20average%E4%B8%8Emean%E5%8C%BA%E5%88%AB,/</url>
    <content><![CDATA[<blockquote>
<p>average和mean都表示均值，但是两个函数却是各有侧重点。这就要求我们在特定的情况下调用最适合的函数。这里我们就来讲一下这连个容易混淆的方法。</p>
</blockquote>
<a id="more"></a>

<p><strong>numpy average与mean区别</strong><br>这里看几个小例子</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In [<span class="number">5</span>]: df = pd.DataFrame(&#123;<span class="string">'data1'</span>:np.random.randn(<span class="number">8</span>),<span class="string">'data2'</span>:np.random.randn(<span class="number">8</span>)&#125;)</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">In [<span class="number">6</span>]: df</span></pre></td></tr><tr><td class="code"><pre><span class="line">Out[<span class="number">6</span>]:</span></pre></td></tr><tr><td class="code"><pre><span class="line">      data1     data2</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="number">0</span> <span class="number">-0.904163</span>  <span class="number">1.266769</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="number">1</span>  <span class="number">0.349836</span>  <span class="number">0.372943</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="number">2</span> <span class="number">-0.140213</span> <span class="number">-1.850433</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="number">3</span>  <span class="number">0.159576</span> <span class="number">-0.712505</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="number">4</span> <span class="number">-0.133263</span> <span class="number">-0.710342</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="number">5</span> <span class="number">-0.426558</span>  <span class="number">2.569380</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="number">6</span> <span class="number">-0.478641</span> <span class="number">-0.912875</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="number">7</span> <span class="number">-0.159328</span>  <span class="number">0.988578</span></span></pre></td></tr></table></figure>

<p>在不传入axis的情况下，对df分别进行average()与mean()运算</p>
<!--more-->
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">In [10]: np.average(df)</span></pre></td></tr><tr><td class="code"><pre><span class="line">Out[10]: -0.04507746461893059</span></pre></td></tr><tr><td class="code"><pre><span class="line">In [12]: np.mean(df)</span></pre></td></tr><tr><td class="code"><pre><span class="line">Out[12]:</span></pre></td></tr><tr><td class="code"><pre><span class="line">data1   -0.216594</span></pre></td></tr><tr><td class="code"><pre><span class="line">data2    0.126439</span></pre></td></tr><tr><td class="code"><pre><span class="line">dtype: float64</span></pre></td></tr></table></figure>

<p>可见np.average方法是对整体取平均值，而np.mean()是默认axis=0的情况下求平均值<br>且两个函数返回的数据类型不同，np.average()返回array数组，而np.mean()返回的是Series类型</p>
<p>在传入axis为0情况下，对df分别进行average()与mean()运算</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In [<span class="number">11</span>]: np.average(df,<span class="number">0</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">Out[<span class="number">11</span>]: array([<span class="number">-0.</span>In [<span class="number">13</span>]: np.mean(df,<span class="number">0</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">In [<span class="number">13</span>]: np.mean(df,<span class="number">0</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">Out[<span class="number">13</span>]:</span></pre></td></tr><tr><td class="code"><pre><span class="line">data1   <span class="number">-0.216594</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">data2    <span class="number">0.126439</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">dtype: float64</span></pre></td></tr></table></figure>

<p>可见，两个函数返回数据一样，但类型不一样</p>
<blockquote>
<p>在axis等于1的情况下，结果与上例相似，在此不举例</p>
</blockquote>
<p>除此之外<strong>average还可以计算加权平均值</strong></p>
<p>什么是加权品均值，这里举个例子</p>
<p>a = [1,2,3,4,5]，b=[2,3,4,5,6]</p>
<p>以b为权重取a的加权平均值结果就是</p>
<p>1*2 + 2*3 + 3*4 + 4*5 + 5*6/2 + 3 + 4 + 5 + 6</p>
<p>所以这里还是举上面的df为例，取以data2为权重data1的加权平均值</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In [<span class="number">17</span>]: np.average(df[<span class="string">'data1'</span>],weights=df[<span class="string">'data2'</span>])</span></pre></td></tr><tr><td class="code"><pre><span class="line">Out[<span class="number">17</span>]: <span class="number">-1.572923774192011</span></span></pre></td></tr></table></figure>

<p>得出结果</p>
]]></content>
      <categories>
        <category>python</category>
        <category>numpy</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>numpy</tag>
        <tag>数据分析</tag>
      </tags>
  </entry>
  <entry>
    <title>numpy中meshgrid函数</title>
    <url>/2019/12/04/numpy%E4%B8%ADmeshgrid%E5%87%BD%E6%95%B0/</url>
    <content><![CDATA[<p>numpy中meshgrid函数</p>
<p>先来看官方文档：<br> <a href="https://docs.scipy.org/doc/numpy/reference/generated/numpy.meshgrid.html" target="_blank" rel="noopener">https://docs.scipy.org/doc/numpy/reference/generated/numpy.meshgrid.html</a><br>功能：从一个坐标向量中返回一个坐标矩阵<br>参数：  </p>
<ul>
<li>x1，x2，x3：一维的数组代表网格的坐标</li>
<li>indexing：{‘xy’,’ij’}，笛卡尔坐标’xy’或者矩阵’ij’下标作为输出，默认是笛卡尔坐标</li>
<li>sparse：bool类型，如果是True，返回一个稀疏矩阵保存在内存中，默认为False</li>
<li>copy： bool类型，如果是False，返回一个原始数组的视图保存在内存中，默认是True。如果，sparse和copy都为False，将有可能返回一个不连续的数组。而且，如果广播数组的元素超过一个，可以使用一个独立的内存。如果想要对这个数组进行写操作，请先拷贝这个数组。 </li>
</ul>
<p>看完官方文档之后还是一脸懵逼？？？？直接上例子解释</p>
<a id="more"></a>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In [<span class="number">1</span>]: nx,ny = (<span class="number">3</span>,<span class="number">2</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">In [<span class="number">4</span>]: x = np.linspace(<span class="number">1</span>,<span class="number">2</span>,nx) <span class="comment"># [1,1.5,2]</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">In [<span class="number">6</span>]: y = np.linspace(<span class="number">1</span>,<span class="number">2</span>,ny) <span class="comment"># [1,2]</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">In [<span class="number">7</span>]: xv,yv = np.meshgrid(x,y)</span></pre></td></tr><tr><td class="code"><pre><span class="line">In [<span class="number">10</span>]: xv</span></pre></td></tr><tr><td class="code"><pre><span class="line">Out[<span class="number">10</span>]:</span></pre></td></tr><tr><td class="code"><pre><span class="line">array([[<span class="number">1.</span> , <span class="number">1.5</span>, <span class="number">2.</span> ],</span></pre></td></tr><tr><td class="code"><pre><span class="line">       [<span class="number">1.</span> , <span class="number">1.5</span>, <span class="number">2.</span> ]])</span></pre></td></tr><tr><td class="code"><pre><span class="line">In [<span class="number">11</span>]: yv</span></pre></td></tr><tr><td class="code"><pre><span class="line">Out[<span class="number">11</span>]:</span></pre></td></tr><tr><td class="code"><pre><span class="line">array([[<span class="number">1.</span>, <span class="number">1.</span>, <span class="number">1.</span>],</span></pre></td></tr><tr><td class="code"><pre><span class="line">       [<span class="number">2.</span>, <span class="number">2.</span>, <span class="number">2.</span>]])</span></pre></td></tr></table></figure>

<p>上面的例子可以看出是将两个输入的数组进行拓展，前一个拓展与后一个有关，后一个拓展与前一个有关。前一个是竖轴拓展，后一个是横轴拓展。  </p>
<p>因为 y 的长度为2，所以 x 竖向被拓展成原来的两倍。同理，y被拓展成横向的三倍 ，输入由原来的数组变成了矩阵，下面我们来看一下表格矩阵的坐标：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In [<span class="number">1</span>]: xv.ravel()</span></pre></td></tr><tr><td class="code"><pre><span class="line">Out[<span class="number">1</span>]:</span></pre></td></tr><tr><td class="code"><pre><span class="line">array([<span class="number">1.</span>,<span class="number">1.5</span>,<span class="number">2.</span>,<span class="number">1.</span>,<span class="number">1.5</span>,<span class="number">2.</span>])</span></pre></td></tr><tr><td class="code"><pre><span class="line">In [<span class="number">2</span>]: yv.ravel()</span></pre></td></tr><tr><td class="code"><pre><span class="line">Out[<span class="number">2</span>]:</span></pre></td></tr><tr><td class="code"><pre><span class="line">array([<span class="number">1.</span>, <span class="number">1.</span>, <span class="number">1.</span>, <span class="number">2.</span>, <span class="number">2.</span>, <span class="number">2.</span>])</span></pre></td></tr></table></figure>

<p>ravel函数的作用是将矩阵变成一个一维的数组，其中xv.ravel()表示x轴的坐标，yv.ravel()表示y轴的坐标，我们将x轴与y轴的坐标一一对应，就形成了一个网格的坐标  </p>
<p>如果将sparse参数设置为True，就不会向上面一样拓展了，它产生的网格不是所有的坐标，只有网格对角线上的坐标。  </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In [<span class="number">1</span>]: xv,yv = np.meshgrid(x,y,sparse=<span class="literal">True</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">In [<span class="number">2</span>]: xv</span></pre></td></tr><tr><td class="code"><pre><span class="line">Out[<span class="number">2</span>]:</span></pre></td></tr><tr><td class="code"><pre><span class="line">array([[<span class="number">1.</span> , <span class="number">1.5</span>, <span class="number">2.</span> ]])</span></pre></td></tr><tr><td class="code"><pre><span class="line">In [<span class="number">3</span>]: yv</span></pre></td></tr><tr><td class="code"><pre><span class="line">Out[<span class="number">3</span>]:</span></pre></td></tr><tr><td class="code"><pre><span class="line">array([[<span class="number">1.</span>],</span></pre></td></tr><tr><td class="code"><pre><span class="line">       [<span class="number">2.</span>]])</span></pre></td></tr></table></figure>

<p>补充，这里的数组参数也可以是3个，相应的会产生3个矩阵。实践出真知，最好还是实践一下</p>
]]></content>
      <categories>
        <category>python</category>
        <category>numpy</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>numpy</tag>
        <tag>数据分析</tag>
      </tags>
  </entry>
</search>
